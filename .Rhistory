s=summarise(d_g,avg=average(steps))
s=summarise(d_g,avg=mean(steps))
View(s)
s=summarise(d_g,avg=mean(steps,na.rm=T))
View(s)
d_g=group_by(d,interval)
s=summarise(d_g,avg=mean(steps,na.rm=T))
which.max(s$interval)
s[which.max(s$interval),"interval"]
```{r}
is.na(d$steps)
?which
View(s)
d_impute=d
for(i in 1:nrow(d_impute))
{
if (is.na(d_impute[i,steps])) {
d_impute[i,steps]=
avg_steps[which(avg_steps&interval==d_impute[i,interval]),
avg]
}
}
View(d)
d_impute=d
for(i in 1:nrow(d_impute))
{
if (is.na(d_impute[i,"steps"])) {
d_impute[i,"steps"]=
avg_steps[which(avg_steps&interval==d_impute[i,interval]),
avg]
}
}
rm(list=ls())
mean=mean(s$total_steps)
median=median(s$total_steps)
d= read.csv(unz("activity.zip","activity.csv"),head=T,na.strings = 'NA')
library(dplyr)
d_g=group_by(d,date)
s=summarise(d_g,total_steps=sum(steps,na.rm = T))
hist(s$total_steps,main = "Histogram of the total number of steps taken each day",
xlab = "total number of steps every day")
median=median(s$total_steps)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: load
d= read.csv(unz("activity.zip","activity.csv"),head=T,na.strings = 'NA')
# Chunk 3: Histogram of the total number of steps taken each day
library(dplyr)
d_g=group_by(d,date)
s=summarise(d_g,total_steps=sum(steps,na.rm = T))
hist(s$total_steps,main = "Histogram of the total number of steps taken each day",
xlab = "total number of steps every day")
# Chunk 4: Mean and median number of steps taken each day
mean=mean(s$total_steps)
median=median(s$total_steps)
# Chunk 5: Time series plot of the average number of steps taken
d_g=group_by(d,interval)
avg_steps=summarise(d_g,avg=mean(steps,na.rm=T))
plot(avg_steps$interval,avg_steps$avg,type="l")
abline(v=avg_steps[which.max(avg_steps$avg),1])
# Chunk 6: maximum number of steps
maximum=avg_steps[which.max(avg_steps$avg),1]
# Chunk 7
sum(is.na(d$steps))
d_impute=d
for(i in 1:nrow(d_impute))
{
if (is.na(d_impute[i,"steps"])) {
d_impute[i,"steps"]=
avg_steps[which(avg_steps&interval==d_impute[i,interval]),
"avg"]
}
}
View(avg_steps)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: load
d= read.csv(unz("activity.zip","activity.csv"),head=T,na.strings = 'NA')
# Chunk 3: Histogram of the total number of steps taken each day
library(dplyr)
d_g=group_by(d,date)
s=summarise(d_g,total_steps=sum(steps,na.rm = T))
hist(s$total_steps,main = "Histogram of the total number of steps taken each day",
xlab = "total number of steps every day")
# Chunk 4: Mean and median number of steps taken each day
mean=mean(s$total_steps)
median=median(s$total_steps)
# Chunk 5: Time series plot of the average number of steps taken
d_g=group_by(d,interval)
avg_steps=summarise(d_g,avg=mean(steps,na.rm=T))
plot(avg_steps$interval,avg_steps$avg,type="l")
abline(v=avg_steps[which.max(avg_steps$avg),1])
# Chunk 6: maximum number of steps
maximum=avg_steps[which.max(avg_steps$avg),1]
# Chunk 7
sum(is.na(d$steps))
d_impute=d
for(i in 1:nrow(d_impute))
{
if (is.na(d_impute[i,"steps"])) {
d_impute[i,"steps"]=
avg_steps[which(avg_steps&interval==d_impute[i,"interval""]),
"avg"]
}
}
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: load
d= read.csv(unz("activity.zip","activity.csv"),head=T,na.strings = 'NA')
# Chunk 3: Histogram of the total number of steps taken each day
library(dplyr)
d_g=group_by(d,date)
s=summarise(d_g,total_steps=sum(steps,na.rm = T))
hist(s$total_steps,main = "Histogram of the total number of steps taken each day",
xlab = "total number of steps every day")
# Chunk 4: Mean and median number of steps taken each day
mean=mean(s$total_steps)
median=median(s$total_steps)
# Chunk 5: Time series plot of the average number of steps taken
d_g=group_by(d,interval)
avg_steps=summarise(d_g,avg=mean(steps,na.rm=T))
plot(avg_steps$interval,avg_steps$avg,type="l")
abline(v=avg_steps[which.max(avg_steps$avg),1])
# Chunk 6: maximum number of steps
maximum=avg_steps[which.max(avg_steps$avg),1]
# Chunk 7
sum(is.na(d$steps))
d_impute=d
for(i in 1:nrow(d_impute))
{
if (is.na(d_impute[i,"steps"])) {
d_impute[i,"steps"]=
avg_steps[which(avg_steps&interval==d_impute[i,"interval"]),
"avg"]
}
}
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: load
d= read.csv(unz("activity.zip","activity.csv"),head=T,na.strings = 'NA')
# Chunk 3: Histogram of the total number of steps taken each day
library(dplyr)
d_g=group_by(d,date)
s=summarise(d_g,total_steps=sum(steps,na.rm = T))
hist(s$total_steps,main = "Histogram of the total number of steps taken each day",
xlab = "total number of steps every day")
# Chunk 4: Mean and median number of steps taken each day
mean=mean(s$total_steps)
median=median(s$total_steps)
# Chunk 5: Time series plot of the average number of steps taken
d_g=group_by(d,interval)
avg_steps=summarise(d_g,avg=mean(steps,na.rm=T))
plot(avg_steps$interval,avg_steps$avg,type="l")
abline(v=avg_steps[which.max(avg_steps$avg),1])
# Chunk 6: maximum number of steps
maximum=avg_steps[which.max(avg_steps$avg),1]
# Chunk 7
sum(is.na(d$steps))
d_impute=d
for(i in 1:nrow(d_impute))
{
if (is.na(d_impute[i,"steps"])) {
d_impute[i,"steps"]=
avg_steps[which(avg_steps$interval==d_impute[i,interval]),
"avg"]
}
}
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: load
d= read.csv(unz("activity.zip","activity.csv"),head=T,na.strings = 'NA')
# Chunk 3: Histogram of the total number of steps taken each day
library(dplyr)
d_g=group_by(d,date)
s=summarise(d_g,total_steps=sum(steps,na.rm = T))
hist(s$total_steps,main = "Histogram of the total number of steps taken each day",
xlab = "total number of steps every day")
# Chunk 4: Mean and median number of steps taken each day
mean=mean(s$total_steps)
median=median(s$total_steps)
# Chunk 5: Time series plot of the average number of steps taken
d_g=group_by(d,interval)
avg_steps=summarise(d_g,avg=mean(steps,na.rm=T))
plot(avg_steps$interval,avg_steps$avg,type="l")
abline(v=avg_steps[which.max(avg_steps$avg),1])
# Chunk 6: maximum number of steps
maximum=avg_steps[which.max(avg_steps$avg),1]
# Chunk 7
sum(is.na(d$steps))
d_impute=d
for(i in 1:nrow(d_impute))
{
if (is.na(d_impute[i,"steps"])) {
d_impute[i,"steps"]=
avg_steps[which(avg_steps$interval==d_impute[i,"interval"]),
"avg"]
}
}
View(d_impute)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: load
d= read.csv(unz("activity.zip","activity.csv"),head=T,na.strings = 'NA')
# Chunk 3: Histogram of the total number of steps taken each day
library(dplyr)
d_g=group_by(d,date)
s=summarise(d_g,total_steps=sum(steps,na.rm = T))
hist(s$total_steps,main = "Histogram of the total number of steps taken each day",
xlab = "total number of steps every day")
# Chunk 4: Mean and median number of steps taken each day
mean=mean(s$total_steps)
median=median(s$total_steps)
# Chunk 5: Time series plot of the average number of steps taken
d_g=group_by(d,interval)
avg_steps=summarise(d_g,avg=mean(steps,na.rm=T))
plot(avg_steps$interval,avg_steps$avg,type="l")
abline(v=avg_steps[which.max(avg_steps$avg),1])
# Chunk 6: maximum number of steps
maximum=avg_steps[which.max(avg_steps$avg),1]
# Chunk 7
sum(is.na(d$steps))
d_impute=d
# fill the NAs by the average steps of the same 5-minute
for(i in 1:nrow(d_impute))
{
if (is.na(d_impute[i,"steps"])) {
d_impute[i,"steps"]=
avg_steps[which(avg_steps$interval==d_impute[i,"interval"]),"avg"]
}
}
d_g=group_by(d_impute,interval)
avg_steps=summarise(d_g,avg=mean(steps,na.rm=T))
plot(avg_steps$interval,avg_steps$avg,type="l")
abline(v=avg_steps[which.max(avg_steps$avg),1])
library(dplyr)
d_g=group_by(d,date)
s=summarise(d_g,total_steps=sum(steps,na.rm = T))
hist(s$total_steps,main = "Histogram of the total number of steps taken each day",
xlab = "total number of steps every day")
maximum=avg_steps[which.max(avg_steps$avg),1]
sum(is.na(d$steps))
d_impute=d
# fill the NAs by the average steps of the same 5-minute
for(i in 1:nrow(d_impute))
{
if (is.na(d_impute[i,"steps"])) {
d_impute[i,"steps"]=
avg_steps[which(avg_steps$interval==d_impute[i,"interval"]),"avg"]
}
}
d_g=group_by(d,interval)
avg_steps=summarise(d_g,avg=mean(steps,na.rm=T))
plot(avg_steps$interval,avg_steps$avg,type="l")
abline(v=avg_steps[which.max(avg_steps$avg),1])
abline(v=avg_steps[which.max(avg_steps$avg),1])
d_g=group_by(d,interval)
avg_steps=summarise(d_g,avg=mean(steps,na.rm=T))
plot(avg_steps$interval,avg_steps$avg,type="l")
abline(v=avg_steps[which.max(avg_steps$avg),1])
d_g=group_by(d_impute,interval)
avg_steps=summarise(d_g,avg=mean(steps,na.rm=T))
plot(avg_steps$interval,avg_steps$avg,type="l")
abline(v=avg_steps[which.max(avg_steps$avg),1])
View(d_impute)
d_g=group_by(d_impute,date)
s=summarise(d_g,total_steps=sum(steps,na.rm = T))
hist(s$total_steps,main = "Histogram of the total number of steps taken each day",
xlab = "total number of steps every day")
d_impute_g=group_by(d_impute,date)
s_impute=summarise(d_impute_g,total_steps=sum(steps,na.rm = T))
hist(s_impute$total_steps,main = "Histogram of the total number of steps taken each day",
xlab = "total number of steps every day")
mean_impute=mean(s_impute$total_steps)
median_impute=median(s_impute$total_steps)
mean_impute
as.character(mean_impute)
View(d)
d_impute$weekday = format(d_impute$date,"%a")
d_impute$weekday = format(d_impute$date,"%a &d_impute")
d_impute$date = as.Date(d_impute$date)
d_impute$weekday = format(d_impute$date,"%a")
View(d_impute)
?is.weekend
library(lubridate)
?is.weekend
install.packages("chron")
library(chron)
?is.weekend
d_impute$weekday = is.weekend(d_impute$date)
is.weekend("2017-12-31")
if (require(dplyr111)==F){
installed.packages("dplyr")
library(dplyr)
}
if (require("chron")==F){
installed.packages("chron")
library(chron)
}
remove.packages(pkgs = chron)
remove.packages(pkgs = chron)
remove.packages(pkgs = "chron")
install.packages(c("backports", "curl", "digest", "htmlTable", "knitr", "MASS", "Matrix", "mgcv", "quantmod", "RCurl", "reshape2", "rlang", "testthat", "tibble", "xts", "yaml"))
library(chron)
install.packages("chron")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: load
d= read.csv(unz("activity.zip","activity.csv"),head=T,na.strings = 'NA')
# Chunk 3
if (require("dplyr")==FALSE){
install.packages("dplyr")
library(dplyr)
}
# Chunk 4: Histogram of the total number of steps taken each day
d_g=group_by(d,date)
s=summarise(d_g,total_steps=sum(steps,na.rm = T))
hist(s$total_steps,main = "Histogram of the total number of steps taken each day",
xlab = "total number of steps every day")
# Chunk 5: Mean and median number of steps taken each day
mean=mean(s$total_steps)
median=median(s$total_steps)
# Chunk 6: Time series plot of the average number of steps taken
d_g=group_by(d,interval)
avg_steps=summarise(d_g,avg=mean(steps,na.rm=T))
plot(avg_steps$interval,avg_steps$avg,type="l")
abline(v=avg_steps[which.max(avg_steps$avg),1])
# Chunk 7: maximum number of steps
maximum=avg_steps[which.max(avg_steps$avg),1]
# Chunk 8
sum(is.na(d$steps))
d_impute=d
# fill the NAs by the average steps of the same 5-minute
for(i in 1:nrow(d_impute))
{
if (is.na(d_impute[i,"steps"])) {
d_impute[i,"steps"]=
avg_steps[which(avg_steps$interval==d_impute[i,"interval"]),"avg"]
}
}
# Chunk 9: histogram
d_impute_g=group_by(d_impute,date)
s_impute=summarise(d_impute_g,total_steps=sum(steps,na.rm = T))
hist(s_impute$total_steps,main = "Histogram of the total number of steps taken each day",
xlab = "total number of steps every day")
mean_impute=mean(s_impute$total_steps)
median_impute=median(s_impute$total_steps)
# Chunk 10
# install 'chron' to call 'is.weekend'
if (require("chron")==FALSE){
install.packages("chron")
library(chron)
}
# Chunk 11
d_impute$date = as.Date(d_impute$date)
d_impute$weekday = if(is.weekend(d_impute$date)){
factor(c(1),levels = c("weekend","weekday"))
} else {
factor(c(2),levels = c("weekend","weekday"))
}
View(d_impute)
d_impute$date = as.Date(d_impute$date)
d_impute$weekday = factor(is.weekend(d_impute$date)+1,levels = c("weekday","weekend"))
View(d_impute)
View(d_impute)
t=is.weekend(d_impute$date)+1
t1=factor(is.weekend(d_impute$date)+1,levels = c("weekday","weekend"))
table(t)
t1=factor(as.integer(is.weekend(d_impute$date))+1,levels = c("weekday","weekend"))
t1=factor(c(1,2),levels = c("weekday","weekend"))
t=as.integer(is.weekend(d_impute$date))+1
class(t)
t=as.integer(is.weekend(d_impute$date))
t=t+1
class(t)
as.Integer(t)
as.integer(t)
d_impute$weekday = factor(as.integer(is.weekend(d_impute$date)+1),levels = c("weekday","weekend"))
View(d_impute)
t=as.integer(is.weekend(d_impute$date)+1)
table(t)
class(t)
t
t2= factor(t,levels = c("weekday","weekend"))
t2= factor(c(1,2,1,2),levels = c("weekday","weekend"))
t2= factor(c(1,2,1,2),levels = c("weekday","weekend"))
d_impute$date = as.Date(d_impute$date)
w = function(x) {
if (is.weekend(x)) {
"weekend"
} else
{
"weekday"
}
}
d_impute$weekday = w(d_impute$date)
d_impute$date = as.Date(d_impute$date)
w = function(x) {
if (is.weekend(x)) {
"weekend"
} else
{
"weekday"
}
}
d_impute$weekday = sapply(d_impute&date,w)
if (is.weekend(x)) {
if (is.weekend(x)) {
"weekend"
} else
{
"weekday"
}
debugSource('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
debugSource('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
print("weekend")
if (is.weekend(x)) {
print("weekend")
} else
{
"weekday"
}
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
w=function(x) x
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
w=function(x) 1
weekday = sapply(c(1,2),FUN = w)
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
View(d_impute)
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
d_impute$date = as.Date(d_impute$date)
w=function(x) {
if(is.weekend(x)){
"weekend"
} else
{
"weekday"
}
}
d_impute$weekday = sapply(d_impute$date,FUN = w)
View(d_impute)
table(d_impute)
table(d_impute$weekday)
d_impute$weekday = as.factor(d_impute$weekday)
d_impute$date = as.Date(d_impute$date)
w=function(x) {
if(is.weekend(x)){
"weekend"
} else
{
"weekday"
}
}
d_impute$weekday = sapply(d_impute$date,FUN = w)
d_impute$weekday = as.factor(d_impute$weekday)
# summrise
d_impute_g = group_by(d_impute,interval)
View(d_impute_g)
s=summarise(d_impute_g,numberofsteps=sum(steps))
View(s)
d_impute$weekday = sapply(d_impute$date,FUN = w)
d_impute$weekday = as.factor(d_impute$weekday)
# summrise
d_impute_g = group_by(d_impute,interval,weekday)
s=summarise(d_impute_g,numberofsteps=sum(steps))
View(d_impute_g)
library(lattice)
summary(d_impute_g$date)
d_impute_g = group_by(d_impute,weekday)
s=summarise(d_impute_g,numberofsteps=sum(steps))
View(s)
d_impute_g = group_by(d_impute,weekday,interval)
str(d_impute_g)
View(d_impute_g)
s=summarise(d_impute_g,numberofsteps=sum(steps))
View(s)
xyplot(interval ~ numberofsteps | weekday,
data = d_impute_g, layout = c(2,1))
# create a variable "weekday"
d_impute$date = as.Date(d_impute$date)
w=function(x) {
if(is.weekend(x)){
"weekend"
} else
{
"weekday"
}
}
d_impute$weekday = sapply(d_impute$date,FUN = w)
d_impute$weekday = as.factor(d_impute$weekday)
# summrise
d_impute_g = group_by(d_impute,weekday,interval)
s=summarise(d_impute_g,numberofsteps=sum(steps))
# install 'chron' to call 'is.weekend'
if (require("lattice")==FALSE){
install.packages("lattice")
library(lattice)
}
xyplot(interval ~ numberofsteps | weekday,
data = d_impute_g, layout = c(2,1))
xyplot(interval ~ numberofsteps | weekday,data = d_impute_g, layout = c(2,1))
xyplot(interval ~ numberofsteps | weekday,data = s, layout = c(2,1))
xyplot(numberofsteps ~ interval | weekday,data = s, layout = c(2,1))
xyplot(numberofsteps ~ interval | weekday,data = s, layout = c(1,2))
xyplot(numberofsteps ~ interval | weekday,data = s, layout = c(1,2),type="l")
rm(list=ls())
