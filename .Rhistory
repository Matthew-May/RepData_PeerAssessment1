knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: load
d= read.csv(unz("activity.zip","activity.csv"),head=T,na.strings = 'NA')
# Chunk 3: Histogram of the total number of steps taken each day
library(dplyr)
d_g=group_by(d,date)
s=summarise(d_g,total_steps=sum(steps,na.rm = T))
hist(s$total_steps,main = "Histogram of the total number of steps taken each day",
xlab = "total number of steps every day")
# Chunk 4: Mean and median number of steps taken each day
mean=mean(s$total_steps)
median=median(s$total_steps)
# Chunk 5: Time series plot of the average number of steps taken
d_g=group_by(d,interval)
avg_steps=summarise(d_g,avg=mean(steps,na.rm=T))
plot(avg_steps$interval,avg_steps$avg,type="l")
abline(v=avg_steps[which.max(avg_steps$avg),1])
# Chunk 6: maximum number of steps
maximum=avg_steps[which.max(avg_steps$avg),1]
# Chunk 7
sum(is.na(d$steps))
d_impute=d
for(i in 1:nrow(d_impute))
{
if (is.na(d_impute[i,"steps"])) {
d_impute[i,"steps"]=
avg_steps[which(avg_steps$interval==d_impute[i,"interval"]),
"avg"]
}
}
View(d_impute)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: load
d= read.csv(unz("activity.zip","activity.csv"),head=T,na.strings = 'NA')
# Chunk 3: Histogram of the total number of steps taken each day
library(dplyr)
d_g=group_by(d,date)
s=summarise(d_g,total_steps=sum(steps,na.rm = T))
hist(s$total_steps,main = "Histogram of the total number of steps taken each day",
xlab = "total number of steps every day")
# Chunk 4: Mean and median number of steps taken each day
mean=mean(s$total_steps)
median=median(s$total_steps)
# Chunk 5: Time series plot of the average number of steps taken
d_g=group_by(d,interval)
avg_steps=summarise(d_g,avg=mean(steps,na.rm=T))
plot(avg_steps$interval,avg_steps$avg,type="l")
abline(v=avg_steps[which.max(avg_steps$avg),1])
# Chunk 6: maximum number of steps
maximum=avg_steps[which.max(avg_steps$avg),1]
# Chunk 7
sum(is.na(d$steps))
d_impute=d
# fill the NAs by the average steps of the same 5-minute
for(i in 1:nrow(d_impute))
{
if (is.na(d_impute[i,"steps"])) {
d_impute[i,"steps"]=
avg_steps[which(avg_steps$interval==d_impute[i,"interval"]),"avg"]
}
}
d_g=group_by(d_impute,interval)
avg_steps=summarise(d_g,avg=mean(steps,na.rm=T))
plot(avg_steps$interval,avg_steps$avg,type="l")
abline(v=avg_steps[which.max(avg_steps$avg),1])
library(dplyr)
d_g=group_by(d,date)
s=summarise(d_g,total_steps=sum(steps,na.rm = T))
hist(s$total_steps,main = "Histogram of the total number of steps taken each day",
xlab = "total number of steps every day")
maximum=avg_steps[which.max(avg_steps$avg),1]
sum(is.na(d$steps))
d_impute=d
# fill the NAs by the average steps of the same 5-minute
for(i in 1:nrow(d_impute))
{
if (is.na(d_impute[i,"steps"])) {
d_impute[i,"steps"]=
avg_steps[which(avg_steps$interval==d_impute[i,"interval"]),"avg"]
}
}
d_g=group_by(d,interval)
avg_steps=summarise(d_g,avg=mean(steps,na.rm=T))
plot(avg_steps$interval,avg_steps$avg,type="l")
abline(v=avg_steps[which.max(avg_steps$avg),1])
abline(v=avg_steps[which.max(avg_steps$avg),1])
d_g=group_by(d,interval)
avg_steps=summarise(d_g,avg=mean(steps,na.rm=T))
plot(avg_steps$interval,avg_steps$avg,type="l")
abline(v=avg_steps[which.max(avg_steps$avg),1])
d_g=group_by(d_impute,interval)
avg_steps=summarise(d_g,avg=mean(steps,na.rm=T))
plot(avg_steps$interval,avg_steps$avg,type="l")
abline(v=avg_steps[which.max(avg_steps$avg),1])
View(d_impute)
d_g=group_by(d_impute,date)
s=summarise(d_g,total_steps=sum(steps,na.rm = T))
hist(s$total_steps,main = "Histogram of the total number of steps taken each day",
xlab = "total number of steps every day")
d_impute_g=group_by(d_impute,date)
s_impute=summarise(d_impute_g,total_steps=sum(steps,na.rm = T))
hist(s_impute$total_steps,main = "Histogram of the total number of steps taken each day",
xlab = "total number of steps every day")
mean_impute=mean(s_impute$total_steps)
median_impute=median(s_impute$total_steps)
mean_impute
as.character(mean_impute)
View(d)
d_impute$weekday = format(d_impute$date,"%a")
d_impute$weekday = format(d_impute$date,"%a &d_impute")
d_impute$date = as.Date(d_impute$date)
d_impute$weekday = format(d_impute$date,"%a")
View(d_impute)
?is.weekend
library(lubridate)
?is.weekend
install.packages("chron")
library(chron)
?is.weekend
d_impute$weekday = is.weekend(d_impute$date)
is.weekend("2017-12-31")
if (require(dplyr111)==F){
installed.packages("dplyr")
library(dplyr)
}
if (require("chron")==F){
installed.packages("chron")
library(chron)
}
remove.packages(pkgs = chron)
remove.packages(pkgs = chron)
remove.packages(pkgs = "chron")
install.packages(c("backports", "curl", "digest", "htmlTable", "knitr", "MASS", "Matrix", "mgcv", "quantmod", "RCurl", "reshape2", "rlang", "testthat", "tibble", "xts", "yaml"))
library(chron)
install.packages("chron")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: load
d= read.csv(unz("activity.zip","activity.csv"),head=T,na.strings = 'NA')
# Chunk 3
if (require("dplyr")==FALSE){
install.packages("dplyr")
library(dplyr)
}
# Chunk 4: Histogram of the total number of steps taken each day
d_g=group_by(d,date)
s=summarise(d_g,total_steps=sum(steps,na.rm = T))
hist(s$total_steps,main = "Histogram of the total number of steps taken each day",
xlab = "total number of steps every day")
# Chunk 5: Mean and median number of steps taken each day
mean=mean(s$total_steps)
median=median(s$total_steps)
# Chunk 6: Time series plot of the average number of steps taken
d_g=group_by(d,interval)
avg_steps=summarise(d_g,avg=mean(steps,na.rm=T))
plot(avg_steps$interval,avg_steps$avg,type="l")
abline(v=avg_steps[which.max(avg_steps$avg),1])
# Chunk 7: maximum number of steps
maximum=avg_steps[which.max(avg_steps$avg),1]
# Chunk 8
sum(is.na(d$steps))
d_impute=d
# fill the NAs by the average steps of the same 5-minute
for(i in 1:nrow(d_impute))
{
if (is.na(d_impute[i,"steps"])) {
d_impute[i,"steps"]=
avg_steps[which(avg_steps$interval==d_impute[i,"interval"]),"avg"]
}
}
# Chunk 9: histogram
d_impute_g=group_by(d_impute,date)
s_impute=summarise(d_impute_g,total_steps=sum(steps,na.rm = T))
hist(s_impute$total_steps,main = "Histogram of the total number of steps taken each day",
xlab = "total number of steps every day")
mean_impute=mean(s_impute$total_steps)
median_impute=median(s_impute$total_steps)
# Chunk 10
# install 'chron' to call 'is.weekend'
if (require("chron")==FALSE){
install.packages("chron")
library(chron)
}
# Chunk 11
d_impute$date = as.Date(d_impute$date)
d_impute$weekday = if(is.weekend(d_impute$date)){
factor(c(1),levels = c("weekend","weekday"))
} else {
factor(c(2),levels = c("weekend","weekday"))
}
View(d_impute)
d_impute$date = as.Date(d_impute$date)
d_impute$weekday = factor(is.weekend(d_impute$date)+1,levels = c("weekday","weekend"))
View(d_impute)
View(d_impute)
t=is.weekend(d_impute$date)+1
t1=factor(is.weekend(d_impute$date)+1,levels = c("weekday","weekend"))
table(t)
t1=factor(as.integer(is.weekend(d_impute$date))+1,levels = c("weekday","weekend"))
t1=factor(c(1,2),levels = c("weekday","weekend"))
t=as.integer(is.weekend(d_impute$date))+1
class(t)
t=as.integer(is.weekend(d_impute$date))
t=t+1
class(t)
as.Integer(t)
as.integer(t)
d_impute$weekday = factor(as.integer(is.weekend(d_impute$date)+1),levels = c("weekday","weekend"))
View(d_impute)
t=as.integer(is.weekend(d_impute$date)+1)
table(t)
class(t)
t
t2= factor(t,levels = c("weekday","weekend"))
t2= factor(c(1,2,1,2),levels = c("weekday","weekend"))
t2= factor(c(1,2,1,2),levels = c("weekday","weekend"))
d_impute$date = as.Date(d_impute$date)
w = function(x) {
if (is.weekend(x)) {
"weekend"
} else
{
"weekday"
}
}
d_impute$weekday = w(d_impute$date)
d_impute$date = as.Date(d_impute$date)
w = function(x) {
if (is.weekend(x)) {
"weekend"
} else
{
"weekday"
}
}
d_impute$weekday = sapply(d_impute&date,w)
if (is.weekend(x)) {
if (is.weekend(x)) {
"weekend"
} else
{
"weekday"
}
debugSource('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
debugSource('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
print("weekend")
if (is.weekend(x)) {
print("weekend")
} else
{
"weekday"
}
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
w=function(x) x
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
w=function(x) 1
weekday = sapply(c(1,2),FUN = w)
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
View(d_impute)
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
source('D:/1document/gitwd/RepData_PeerAssessment1/test.R')
d_impute$date = as.Date(d_impute$date)
w=function(x) {
if(is.weekend(x)){
"weekend"
} else
{
"weekday"
}
}
d_impute$weekday = sapply(d_impute$date,FUN = w)
View(d_impute)
table(d_impute)
table(d_impute$weekday)
d_impute$weekday = as.factor(d_impute$weekday)
d_impute$date = as.Date(d_impute$date)
w=function(x) {
if(is.weekend(x)){
"weekend"
} else
{
"weekday"
}
}
d_impute$weekday = sapply(d_impute$date,FUN = w)
d_impute$weekday = as.factor(d_impute$weekday)
# summrise
d_impute_g = group_by(d_impute,interval)
View(d_impute_g)
s=summarise(d_impute_g,numberofsteps=sum(steps))
View(s)
d_impute$weekday = sapply(d_impute$date,FUN = w)
d_impute$weekday = as.factor(d_impute$weekday)
# summrise
d_impute_g = group_by(d_impute,interval,weekday)
s=summarise(d_impute_g,numberofsteps=sum(steps))
View(d_impute_g)
library(lattice)
summary(d_impute_g$date)
d_impute_g = group_by(d_impute,weekday)
s=summarise(d_impute_g,numberofsteps=sum(steps))
View(s)
d_impute_g = group_by(d_impute,weekday,interval)
str(d_impute_g)
View(d_impute_g)
s=summarise(d_impute_g,numberofsteps=sum(steps))
View(s)
xyplot(interval ~ numberofsteps | weekday,
data = d_impute_g, layout = c(2,1))
# create a variable "weekday"
d_impute$date = as.Date(d_impute$date)
w=function(x) {
if(is.weekend(x)){
"weekend"
} else
{
"weekday"
}
}
d_impute$weekday = sapply(d_impute$date,FUN = w)
d_impute$weekday = as.factor(d_impute$weekday)
# summrise
d_impute_g = group_by(d_impute,weekday,interval)
s=summarise(d_impute_g,numberofsteps=sum(steps))
# install 'chron' to call 'is.weekend'
if (require("lattice")==FALSE){
install.packages("lattice")
library(lattice)
}
xyplot(interval ~ numberofsteps | weekday,
data = d_impute_g, layout = c(2,1))
xyplot(interval ~ numberofsteps | weekday,data = d_impute_g, layout = c(2,1))
xyplot(interval ~ numberofsteps | weekday,data = s, layout = c(2,1))
xyplot(numberofsteps ~ interval | weekday,data = s, layout = c(2,1))
xyplot(numberofsteps ~ interval | weekday,data = s, layout = c(1,2))
xyplot(numberofsteps ~ interval | weekday,data = s, layout = c(1,2),type="l")
rm(list=ls())
# Calculate average steps per interval for weekends
StepsPerInterval.weekend <- tapply(activity.imputed[activity.imputed$day == "weekend" ,]$steps, activity.imputed[activity.imputed$day == "weekend" ,]$interval, mean, na.rm = TRUE)
activity <- read.csv("activity.csv", header = TRUE)
StepsPerDay <- tapply(activity$steps, activity$date, sum)
StepsPerDay
hist(StepsPerDay, xlab = "Number of Steps", main = "Histogram: Steps per Day")
MeanPerDay <- mean(StepsPerDay, na.rm = TRUE)
MedianPerDay <- median(StepsPerDay, na.rm = TRUE)
StepsPerInterval <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
plot(as.numeric(names(StepsPerInterval)),
StepsPerInterval,
xlab = "Interval",
ylab = "Steps",
main = "Average Daily Activity Pattern",
type = "l")
maxInterval <- names(sort(StepsPerInterval, decreasing = TRUE)[1])
maxSteps <- sort(StepsPerInterval, decreasing = TRUE)[1]
NA.vals <- sum(is.na(activity$steps))
NA.vals
StepsPerInterval <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
# split activity data by interval
activity.split <- split(activity, activity$interval)
# fill in missing data for each interval
for(i in 1:length(activity.split)){
activity.split[[i]]$steps[is.na(activity.split[[i]]$steps)] <- StepsPerInterval[i]
}
activity.imputed <- do.call("rbind", activity.split)
activity.imputed <- activity.imputed[order(activity.imputed$date) ,]
StepsPerDay.imputed <- tapply(activity.imputed$steps, activity.imputed$date, sum)
hist(StepsPerDay.imputed, xlab = "Number of Steps", main = "Histogram: Steps per Day (Imputed data)")
MeanPerDay.imputed <- mean(StepsPerDay.imputed, na.rm = TRUE)
MedianPerDay.imputed <- median(StepsPerDay.imputed, na.rm = TRUE)
MeanPerDay.imputed
MedianPerDay.imputed
activity.imputed$day <- ifelse(weekdays(as.Date(activity.imputed$date)) == "Saturday" | weekdays(as.Date(activity.imputed$date)) == "Sunday", "weekend", "weekday")
# Calculate average steps per interval for weekends
StepsPerInterval.weekend <- tapply(activity.imputed[activity.imputed$day == "weekend" ,]$steps, activity.imputed[activity.imputed$day == "weekend" ,]$interval, mean, na.rm = TRUE)
# Calculate average steps per interval for weekdays
StepsPerInterval.weekday <- tapply(activity.imputed[activity.imputed$day == "weekday" ,]$steps, activity.imputed[activity.imputed$day == "weekday" ,]$interval, mean, na.rm = TRUE)
# Set a 2 panel plot
par(mfrow=c(1,2))
# Plot weekday activity
plot(as.numeric(names(StepsPerInterval.weekday)),
StepsPerInterval.weekday,
xlab = "Interval",
ylab = "Steps",
main = "Activity Pattern (Weekdays)",
type = "l")
# Plot weekend activity
plot(as.numeric(names(StepsPerInterval.weekend)),
StepsPerInterval.weekend,
xlab = "Interval",
ylab = "Steps",
main = "Activity Pattern (Weekends)",
type = "l")
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
imputed_data$dow = as.factor(ifelse(is.element(weekdays(as.Date(imputed_data$date)),weekdays)
, "Weekday", "Weekend"))
unzip("activity.zip")
activityData <- read.csv(file = "activity.csv", header = T, sep = ",")
# removing NA or missing values from activityData
newActivityData <- na.omit(object = activityData)
totalSteps <- with(data = newActivityData, expr = aggregate(steps, by = list(date), FUN = sum))
names(totalSteps) <- c("date", "steps")
hist(totalSteps$steps, main = "Total number of steps taken per day"
, xlab = "number of steps per day"
, breaks = seq(0,25000, by=5000))
actSteps.mean <- mean(totalSteps$steps)
actSteps.median <- median(totalSteps$steps)
averageTotalSteps <- with(data = newActivityData, expr = aggregate(steps, by = list(interval)
, FUN = mean))
names(averageTotalSteps) <- c("interval", "steps.mean")
plot(averageTotalSteps$interval, averageTotalSteps$steps.mean, type = "l"
, lwd = 2, xlab="Interval", ylab="Average number of steps"
, main="Average number of steps per intervals")
max_interval <- averageTotalSteps[which.max(averageTotalSteps$steps.mean),1]
missingSteps <- sum(is.na(activityData$steps))
incomplete <- sum(!complete.cases(activityData))
imputed_data <-
transform(activityData
, steps = ifelse(is.na(activityData$steps)
, averageTotalSteps$steps[match(activityData$interval
, averageTotalSteps$interval)]
, activityData$steps))
imputed_data[as.character(imputed_data$date) == "2012-10-01", 1] <- 0
totalSteps.imputed <- aggregate(steps ~ date, imputed_data, sum)
hist(totalSteps.imputed$steps, main = paste("Total Steps Per Day"), col="blue"
, xlab="Number of Steps")
#Create Histogram to show difference.
hist(totalSteps$steps, main = paste("Total Steps Per Day"), col="red", xlab="Number of Steps"
, add=T)
legend("topright", c("Imputed", "Non-imputed"), col=c("blue", "red"), lwd=10)
actSteps.imputed.mean <- mean(totalSteps.imputed$steps)
actSteps.imputed.median <- median(totalSteps.imputed$steps)
mean_diff <- mean(totalSteps.imputed$steps) - mean(totalSteps$steps)
median_diff <- median(totalSteps.imputed$steps) - median(totalSteps$steps)
total_diff <- sum(totalSteps.imputed$steps) - sum(totalSteps$steps)
weekdays <- c("周一", "周二", "周三", "周四", "周五")
imputed_data$dow = as.factor(ifelse(is.element(weekdays(as.Date(imputed_data$date)),weekdays)
, "Weekday", "Weekend"))
totalSteps.imputed <- aggregate(steps ~ interval + dow, imputed_data, mean)
library(lattice)
xyplot(totalSteps.imputed$steps ~ totalSteps.imputed$interval|totalSteps.imputed$dow
, main="Average Steps per Day by Interval",xlab="Interval", ylab="Steps",layout=c(1,2)
, type="l")
View(activityData)
?aggregate
View(totalSteps)
View(totalSteps)
?complete.cases
complete.cases(d1)
unzip("activity.zip")
d1 <- read.csv(file = "activity.csv", header = T, sep = ",")
# removing NA or missing values from d1
d2 <- na.omit(object = d1)
totalSteps <- aggregate(d2$steps, by = list(d2$date), FUN = sum)
names(totalSteps) <- c("date", "steps")
hist(totalSteps$steps, main = "Total number of steps taken per day"
, xlab = "number of steps per day"
, breaks = seq(0,25000, by=5000))
actSteps.mean <- mean(totalSteps$steps)
actSteps.median <- median(totalSteps$steps)
avg_steps <- aggregate(d2$steps, by = list(d2$interval), FUN = mean)
names(avg_steps) <- c("interval", "steps.mean")
plot(avg_steps$interval, avg_steps$steps.mean, type = "l"
, lwd = 2, xlab="Interval", ylab="Average number of steps"
, main="Average number of steps per intervals")
max_interval <- avg_steps[which.max(avg_steps$steps.mean),1]
missingSteps <- sum(is.na(d1$steps))
complete.cases(d1)
d22<-data.frame(a=c(NA,1),b=c(1,NA))
complete.cases(d22)
incomplete <- sum(!complete.cases(d1))
incomplete
missingSteps
?transform
?transform.data.frame
？subsetting
?subsetting
?aggregate
totalSteps.imputed <- aggregate(steps ~ date, imputed_data, sum)
hist(totalSteps.imputed$steps, main = paste("Total Steps Per Day"), col="blue"
, xlab="Number of Steps")
#Create Histogram to show difference.
hist(totalSteps$steps, main = paste("Total Steps Per Day"), col="red", xlab="Number of Steps"
, add=T)
legend("topright", c("Imputed", "Non-imputed"), col=c("blue", "red"), lwd=10)
View(totalSteps.imputed)
hist(totalSteps.imputed$steps, main = paste("Total Steps Per Day"), col="blue"
, xlab="Number of Steps")
hist(totalSteps$steps, main = paste("Total Steps Per Day"), col="red", xlab="Number of Steps"
, add=T)
hist(totalSteps.imputed$steps, main = paste("Total Steps Per Day"), col="blue"
, xlab="Number of Steps")
#Create Histogram to show difference.
hist(totalSteps$steps, main = paste("Total Steps Per Day"), col="red", xlab="Number of Steps"
, add=T)
knitr::opts_chunk$set(echo = TRUE)
d=read.csv(unz("repdata%2Fdata%2FStormData.csv.bz2"))
d=read.csv(unz("repdata%2Fdata%2FStormData.csv.bz2","repdata%2Fdata%2FStormData.csv))
d=read.csv(unz("repdata%2Fdata%2FStormData.csv.bz2","repdata%2Fdata%2FStormData.csv"))
d=read.csv(unz("repdata\%2Fdata\%2FStormData.csv.bz2","repdata\%2Fdata\%2FStormData.csv"))
d=read.csv(unz("repdata\\%2Fdata\\%2FStormData.csv.bz2","repdata\%2Fdata\%2FStormData.csv"))
d=read.csv(unz("repdata\\%2Fdata\\%2FStormData.csv.bz2","repdata\\%2Fdata\\%2FStormData.csv"))
d=read.csv(unz("repdata\\%2Fdata\\%2FStormData.csv.bz2","repdata\\%2Fdata\\%2FStormData.csv"))
d=read.csv("repdata\\%2Fdata\\%2FStormData.csv.bz2")
d=read.csv("repdata\%2Fdata\%2FStormData.csv.bz2")
d=read.csv("repdata%2Fdata%2FStormData.csv.bz2")
